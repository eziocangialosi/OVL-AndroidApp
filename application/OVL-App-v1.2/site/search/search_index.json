{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the OVL Application documentation","text":""},{"location":"#main","title":"main","text":"<pre><code>import { useState, useEffect, useRef } from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Text, View, TouchableOpacity, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\n/* Importation des classes/fonctions des autres fichiers */\nimport LoginScreen from './components/loginScreen';\nimport TrackerScreen from './components/trackerScreen';\nimport AddTrackerScreen from './components/addTrackerScreen';\nimport CoordinatesScreen from './components/coordinatesScreen';\nimport HistoryScreen from './components/historyScreen';\nimport SettingsScreen from './components/settingsScreen';\nimport RegisterScreen from './components/registerScreen';\n/* Demande \u00e0 l'utilisateur les permissions pour recevoir des notifications et r\u00e9cup\u00e8re son token */\nasync function registerForPushNotificationsAsync() {\nlet token = '';\nif (Platform.OS === 'android') {\nawait Notifications.setNotificationChannelAsync('default', {\nname: 'default',\nimportance: Notifications.AndroidImportance.MAX,\nvibrationPattern: [0, 250, 250, 250],\nlightColor: '#FF231F7C',\n});\n}\n/* Si l'utilisateur est sur un vrai t\u00e9l\u00e9phone */\nif (Device.isDevice) {\n/* Demande les permissions */\nconst { status: existingStatus } =\nawait Notifications.getPermissionsAsync();\nlet finalStatus = existingStatus;\n/* Si les permissions ne sont pas d\u00e9j\u00e0 accord\u00e9es, les demandes */\nif (existingStatus !== 'granted') {\nconst { status } = await Notifications.requestPermissionsAsync();\nfinalStatus = status;\n}\n/* Si les permissions n'ont pas \u00e9t\u00e9 accord\u00e9, affiche une erreur */\nif (finalStatus !== 'granted') {\nconsole.log('Permissions for notifications have been denied');\nreturn;\n/* Si les permissisons ont \u00e9t\u00e9 accept\u00e9es, r\u00e9cup\u00e8re le token de l'utilisateur. */\n} else {\ntoken = (await Notifications.getExpoPushTokenAsync()).data;\nconsole.log(token);\n}\n/* Si l'utilisateur n'est pas sur un vrai t\u00e9l\u00e9phone (web, emulateur...), affiche une erreur */\n} else {\nalert('Must use physical device for Push Notifications');\n}\nreturn token;\n}\n/* Fonction principale : elle se lance lorsque l'application d\u00e9marre */\nconst Main = () =&gt; {\nconst Stack = createNativeStackNavigator();\nreturn (\n&lt;NavigationContainer&gt;\n{/* D\u00e9finie l'interface de connexion comme l'interface initiale */}\n&lt;Stack.Navigator initialRouteName=\"InitNavigator\"&gt;\n&lt;Stack.Screen name=\"InitNavigator\" component={Init} /&gt;\n&lt;Stack.Screen\noptions={{ headerShown: false }}\nname=\"LoginNavigator\"\ncomponent={LoginScreen}\n/&gt;\n&lt;Stack.Screen\nname=\"TrackerNavigator\"\ncomponent={({ route }) =&gt; (\n&lt;TrackerScreen\ntoken={route.params.token}\nnavigation={route.params.navigation}\n/&gt;\n)}\n/&gt;\n&lt;Stack.Screen name=\"AddTrackerNavigator\" component={AddTrackerScreen} /&gt;\n&lt;Stack.Screen\nname=\"CoordinatesNavigator\"\ncomponent={({ route }) =&gt; (\n&lt;CoordinatesScreen\ntrackerId={route.params.trackerId}\nnavigation={route.params.navigation}\ntoken={route.params.token}\n/&gt;\n)}\n/&gt;\n&lt;Stack.Screen\nname=\"HistoryNavigator\"\ncomponent={({ route }) =&gt; (\n&lt;HistoryScreen trackerId={route.params.trackerId} /&gt;\n)}\n/&gt;\n&lt;Stack.Screen\nname=\"SettingsNavigator\"\ncomponent={({ route }) =&gt; (\n&lt;SettingsScreen\ntrackerId={route.params.trackerId}\ntoken={route.params.token}\n/&gt;\n)}\n/&gt;\n&lt;Stack.Screen name=\"RegisterNavigator\" component={RegisterScreen} /&gt;\n&lt;/Stack.Navigator&gt;\n&lt;/NavigationContainer&gt;\n);\n};\nconst Init = ({ navigation }) =&gt; {\nconst [expoPushToken, setExpoPushToken] = useState('');\nconst [notification, setNotification] = useState(false);\nconst notificationListener = useRef();\nconst responseListener = useRef();\nuseEffect(() =&gt; {\nNotifications.setNotificationHandler({\nhandleNotification: async () =&gt; ({\nshouldShowAlert: true,\nshouldPlaySound: true,\nshouldSetBadge: true,\n}),\n});\nregisterForPushNotificationsAsync().then((token) =&gt;\nsetExpoPushToken(token)\n);\nnotificationListener.current =\nNotifications.addNotificationReceivedListener((notification) =&gt; {\nsetNotification(notification);\n});\nresponseListener.current =\nNotifications.addNotificationResponseReceivedListener((response) =&gt; {\nconsole.log(response);\n});\nconst subscription = Notifications.addNotificationReceivedListener(\n(notification) =&gt; {\nconsole.log(notification);\n}\n);\nnavigation.navigate('LoginNavigator', {\nexpoToken: expoPushToken,\n});\n});\n};\nexport default Main;\n</code></pre>"},{"location":"#loginscreen","title":"loginScreen","text":"<pre><code>import React, { useState, useEffect } from 'react';\nimport {\nText,\nView,\nTouchableOpacity,\nTextInput,\nSafeAreaView,\n} from 'react-native';\nimport * as Notifications from 'expo-notifications';\n/* Importation des styles */\nimport Styles from './styles';\nimport LoginStyles from './loginStyles';\n/* Fonction qui permet d'afficher la page de connexion et d'int\u00e9ragir avec elle\nRe\u00e7oit en param\u00e8tre la variable 'navigation' permettant de changer de page */\nfunction LoginScreen({ route, navigation }) {\nconst [email, setEmail] = useState('');\nconst [password, setPassword] = useState('');\nconst { expoToken } = route.params;\n/* Affiche des logs au lancement et \u00e0 la 'destruction'*/\nuseEffect(() =&gt; {\nconsole.log('');\nconsole.log('LOGIN SCREEN LOGS :');\n}, []);\n/* Fonction qui va faire une requ\u00eate \u00e0 l'API en envoyant l'email et le mot de passe saisi par l'utilisateur afin de\n  recevoir son token */\nconst getToken = async () =&gt; {\n/* Si il y a au moins 1 champ vide, affiche une erreur */\nif (email == '' || password == '') {\nalert('Please enter information in the fields');\n/* Si le champ 'e-mail ne contient pas d'arobase, affiche une erreur */\n} else if (/@/g.test(email) == 0) {\nalert('Please enter correct email in the field');\n} else {\ntry {\nconsole.log('Email : ' + email);\nconsole.log('Password : ' + password);\n/* Fait une r\u00e9qu\u00eate \u00e0 l'API en lui donnant l'email et le mot de passe saisi par l'utilisateur */\nconst response = await fetch(\n'https://api.ovl.tech-user.fr/user/' + email + '/' + password\n);\n/* Met la r\u00e9ponde se l'API dans la variable 'json' */\nconst json = await response.json();\nconsole.log(json);\n/* Si il n'y a pas d'erreur, change la fen\u00eatre de navigation pour celle de selection du tracker\n        en envoyant le token et la variable 'navigation'  */\nif (json.error.Message == 'Nothing goes wrong.') {\nconsole.log('LoginScreen token : ' + json.user);\nnavigation.navigate('TrackerNavigator', {\ntoken: json.user,\nnavigation: navigation,\n});\n/* Sinon, affiche un message d'erreur indiquant que les identifiants sont incorrects. */\n} else {\nalert(\"Nom d'utilisateur ou mot de passe incorrect.\");\n}\n} catch (error) {\n/* Si l'API ne r\u00e9pond pas, affiche une erreur indiquant que l'API ne fonctionne pas */\nconsole.log(error);\nalert('API down');\n}\n}\n};\nreturn (\n&lt;View style={Styles.container}&gt;\n&lt;SafeAreaView&gt;\n{/* Cr\u00e9\u00e9 le champ 'email' : lorsque l'utilisateur \u00e9crit quelque chose dedans, le met dans la variable 'email' */}\n&lt;Text style={Styles.paragraph}&gt;E-mail&lt;/Text&gt;\n&lt;TextInput\nstyle={Styles.input}\nonChangeText={(text) =&gt; setEmail(text)}\nvalue={email}\n/&gt;\n{/* Cr\u00e9\u00e9 le champ 'password' : lorsque l'utilisateur \u00e9crit quelque chose dedans, le met dans la variable 'password' */}\n&lt;Text style={Styles.paragraph}&gt;Password&lt;/Text&gt;\n&lt;TextInput\nstyle={Styles.input}\nonChangeText={(text) =&gt; setPassword(text)}\nvalue={password}\nsecureTextEntry={true}\n/&gt;\n&lt;/SafeAreaView&gt;\n&lt;View style={Styles.mapButtonContainer}&gt;\n&lt;TouchableOpacity\nstyle={LoginStyles.loginButton}\nonPress={() =&gt;\nnavigation.navigate('RegisterNavigator', {\nexpoPushToken: expoToken,\n})\n}&gt;\n&lt;Text style={LoginStyles.loginButtonText}&gt;Register&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n{/* Cr\u00e9\u00e9 un bouton de connexion qui va appeller la fonction 'getToken' */}\n&lt;TouchableOpacity\nstyle={LoginStyles.loginButton}\nonPress={() =&gt; getToken()}&gt;\n&lt;Text style={LoginStyles.loginButtonText}&gt;Login&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n&lt;/View&gt;\n);\n};\nexport default LoginScreen;\n</code></pre>"},{"location":"#registerscreen","title":"registerScreen","text":"<pre><code>import React, { useState, useEffect } from 'react';\nimport {\nView,\nTouchableOpacity,\nText,\nSafeAreaView,\nTextInput,\n} from 'react-native';\n/* Importation des styles */\nimport Styles from './styles';\nimport LoginStyles from './loginStyles';\n/* Permet de faire une requ\u00eate \u00e0 l'API pour ajouter un utilisateur\nRe\u00e7oit en param\u00e8tre l'email de l'utilisateur, son mot de passe et la variable 'navigation' */\nconst Register = (\nemail,\npassword,\nconfirmPassword,\nexpoPushToken,\nnavigation\n) =&gt; {\n/* Si l'utilisateur n'a rien saisi dans un des champs, affiche une erreur */\nconsole.log(expoPushToken);\nif (email == '' || password == '' || confirmPassword == '') {\nalert('Please enter information in the fields');\n/* Si l'utilisateur n'a pas saisi le m\u00eame mot de passe */\n} else if (password !== confirmPassword) {\nalert(\"Passwords fields haven't the same information\");\n/* Si l'utilisateur ne rentre pas un email */\n} else if (\n/@/g.test(email) == 0 ||\n/ /g.test(email) == 1 ||\nemail.length &gt; 255\n) {\nalert('Please enter correct email in the field');\n/* Si l'utilisateur met un espace dans le mot de passe */\n} else if (/ /g.test(password) == 1) {\nalert(\"Please don't put a space in the password field\");\n/* Si l'utilisateur saisi un mot de passe trop long ou trop court */\n} else if (password.length &lt; 8 || password.length &gt; 24) {\nalert('Please enter a password between 8 and 24 characters');\n} else {\n/* Sinon, fait une requ\u00eate 'POST' \u00e0 l'API en envoyant l'email, le mot de passe et le token expo de l'utilisateur */\nalert(expoPushToken);\nfetch('https://api.ovl.tech-user.fr/user/', {\nmethod: 'POST',\nheaders: {\nAccept: 'application/json',\n'Content-Type': 'application/json',\n},\n/* Donn\u00e9es envoy\u00e9es \u00e0 l'API */\nbody: JSON.stringify({\nmail: email,\npassword: password,\nnotif: expoPushToken,\n}),\n})\n/* R\u00e9cup\u00e8re la r\u00e9ponse de l'API */\n.then((response) =&gt; response.json())\n.then((json) =&gt; {\nconsole.log(json);\n/* Si il n'y a pas eu d'erreur, envoie l'utilisateur \u00e0 la page de login et affiche un succ\u00e8s d'inscription */\nif (json.error.Message == 'Nothing goes wrong.') {\nalert(\n'Registration has been successfully completed.\\n' +\n'topicTX : ' +\njson.Topics.TX +\n'\\n' +\n'topicRX : ' +\njson.Topics.RX +\n'\\n' +\n'trackerID : ' +\njson.TrackerId\n);\nnavigation.goBack();\n}\n});\n}\n};\n/* Affiche la page d'ajout de traqueur\nRe\u00e7oit en param\u00e8tre la variable 'navigation' */\nfunction RegisterScreen({ route, navigation }) {\nconst [email, setEmail] = useState('');\nconst [password, setPassword] = useState('');\nconst [confirmPassword, setconfirmPassword] = useState('');\nconst { expoPushToken } = route.params;\n/* Affiche des logs au lancement et \u00e0 la 'destruction'*/\nuseEffect(() =&gt; {\nconsole.log('');\nconsole.log('REGISTER LOGS :');\n}, []);\nreturn (\n&lt;View style={Styles.container}&gt;\n{/* Cr\u00e9\u00e9 un champ qui met dans la variable 'email' ce que saisi l'utilisateur */}\n&lt;Text style={Styles.paragraph}&gt;E-mail&lt;/Text&gt;\n&lt;TextInput\nstyle={Styles.input}\nonChangeText={(text) =&gt; setEmail(text)}\nvalue={email}\n/&gt;\n{/* Cr\u00e9\u00e9 un champ qui met dans la variable 'password' ce que saisi l'utilisateur */}\n&lt;Text style={Styles.paragraph}&gt;Password&lt;/Text&gt;\n&lt;TextInput\nstyle={Styles.input}\nonChangeText={(text) =&gt; setPassword(text)}\nvalue={password}\nsecureTextEntry={true}\n/&gt;\n{/* Cr\u00e9\u00e9 un champ qui met dans la variable 'confirmPassword' ce que saisi l'utilisateur */}\n&lt;Text style={Styles.paragraph}&gt;Confirm Password&lt;/Text&gt;\n&lt;TextInput\nstyle={Styles.input}\nonChangeText={(text) =&gt; setconfirmPassword(text)}\nvalue={confirmPassword}\nsecureTextEntry={true}\n/&gt;\n{/* Cr\u00e9\u00e9 un bouton qui va appeller la fonction 'AddTraqueur' */}\n&lt;TouchableOpacity\nstyle={LoginStyles.addTrackerButton}\nonPress={() =&gt;\nRegister(email, password, confirmPassword, expoPushToken, navigation)\n}&gt;\n&lt;Text style={LoginStyles.loginButtonText}&gt;Register&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n);\n}\nexport default RegisterScreen;\n</code></pre>"},{"location":"#addtrackerscreen","title":"addTrackerScreen","text":"<pre><code>import React, { Component } from 'react';\nimport { FlatList, View, TouchableOpacity, Text } from 'react-native';\n/* Importation des styles */\nimport Styles from './styles';\nimport TrackerStyles from './trackerStyles';\n/* Affiche un boutons avec le nom du traqueur re\u00e7u.\nRe\u00e7oit en param\u00e8tre le token de l'utilisateur, le nom de son traqueur avec son ID et la variable 'navigation' */\nconst ButtonCreator = ({\ntrackerName,\ntrackerId,\nnavigation,\ntoken,\n}: ItemProps) =&gt; (\n&lt;View style={Styles.item}&gt;\n{/* Si le bouton est cliqu\u00e9, passe \u00e0 la page qui affiche les coordonn\u00e9es du traqueur */}\n&lt;TouchableOpacity\nstyle={TrackerStyles.trackerButtonContainer}\nonPress={() =&gt;\nnavigation.navigate('CoordinatesNavigator', {\ntrackerId: trackerId,\nnavigation: navigation,\ntoken: token,\n})\n}&gt;\n&lt;Text style={TrackerStyles.appButtonText}&gt;{trackerName}&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n);\n/* Param\u00e8tres de la class 'TrackerScreen' */\ninterface AppProps {\nnavigation: any;\ntoken: string;\n}\n/* Atributs de la class TrackerScreen */\ninterface AppState {\ndata: any[];\n}\n/* Permet d'afficher la liste des traqueur d'un utilisateur\nRe\u00e7oit en param\u00e8tre le token de l'utilisateur et la variable 'navigation' */\nexport default class TrackerScreen extends Component&lt;AppProps, AppState&gt; {\nstate: AppState = {\ndata: [],\n};\n/* Fonction qui va faire une requ\u00eate \u00e0 l'API en envoyant le token de l'utilisateur\n  pour recevoir le nom et l'ID de ses traqueurs*/\nasync getTrackers() {\ntry {\n/* Fait une r\u00e9qu\u00eate \u00e0 l'API en lui donnant le token de l'utilisateur */\nconst response = await fetch(\n'https://api.ovl.tech-user.fr/iot_list/' + this.props.token\n);\n/* Met la r\u00e9ponde de l'API dans la variable 'json' */\nconst json = await response.json();\nconsole.log(json);\n/* Si il n'y a pas d'erreur, met le nom et l'ID des traqueurs dans le tableau 'data' */\nif (json.error.Message == 'Nothing goes wrong.') {\nthis.setState({ data: json.trackers.iotArray });\n} else {\n/* Sinon, affiche une erreur */\nalert('Unknown error');\n}\n} catch (error) {\n/* Si l'API ne r\u00e9pond pas, affiche une erreur indiquant que l'API ne fonctionne pas */\nconsole.log(error);\nalert('API down');\n}\n}\n/* Lorsque la class se cr\u00e9\u00e9, lance la fonction 'getTrackers' */\ncomponentDidMount() {\nconsole.log('');\nconsole.log('TRACKER SCREEN LOGS :');\nconsole.log('TrackerScreen token : ' + this.props.token);\nthis.getTrackers();\n}\nrender() {\nconst { data } = this.state;\nreturn (\n&lt;View style={Styles.container}&gt;\n{/* Envoie l'utilisateur \u00e0 la page d'ajout de traqueur en envoyant son token */}\n&lt;TouchableOpacity\nstyle={TrackerStyles.addTrackerButtonContainer}\nonPress={() =&gt;\nthis.props.navigation.navigate('AddTrackerNavigator', {\ntoken: this.props.token,\n},)\n}&gt;\n&lt;Text style={TrackerStyles.appButtonText}&gt;Add tracker&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n{/* Rafraichi la page en appelant la fonction 'getTrackers' */}\n&lt;TouchableOpacity\nstyle={TrackerStyles.addTrackerButtonContainer}\nonPress={() =&gt; this.getTrackers()}&gt;\n&lt;Text style={TrackerStyles.appButtonText}&gt;Refresh&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;Text style={TrackerStyles.listText}&gt;Tracker list :&lt;/Text&gt;\n{/* Affiche un bouton pour chaque tracker r\u00e9cup\u00e9r\u00e9 par la fonction 'getTrackers' (en utilisant la fonction 'ButtonCreator') */}\n&lt;FlatList\ndata={data}\nrenderItem={({ item }) =&gt; (\n&lt;ButtonCreator\ntrackerName={item.trackerName}\ntrackerId={item.id}\nnavigation={this.props.navigation}\ntoken={this.props.token}\n/&gt;\n)}\nkeyExtractor={(item) =&gt; item.id}\n/&gt;\n&lt;/View&gt;\n);\n}\n}\n</code></pre>"},{"location":"#historyscreen","title":"historyScreen","text":"<pre><code>import React, { useState, useEffect } from 'react';\nimport {\nView,\nTouchableOpacity,\nText,\nSafeAreaView,\nTextInput,\n} from 'react-native';\n/* Importation des styles */\nimport Styles from './styles';\nimport LoginStyles from './loginStyles';\n/* Permet de faire une requ\u00eate \u00e0 l'API pour ajouter un traqueur\nRe\u00e7oit en param\u00e8tre le token de l'utilisateur, le nom de son traqueur et la variable 'navigation' */\nconst AddTracker = (token, trackerName, navigation) =&gt; {\n/* Si l'utilisateur n'a pas saisi le nom de son nouveau traqueur, affiche une erreur */\nif (trackerName == '') {\nalert('Please enter the name of your tracker');\n} else {\n/* Sinon, fait une requ\u00eate 'PUT' \u00e0 l'API en envoyant le token de l'utilisateur et le nom du traqueur qui a \u00e9t\u00e9 s\u00e9lectionn\u00e9 */\nfetch('https://api.ovl.tech-user.fr/iot', {\nmethod: 'POST',\nheaders: {\nAccept: 'application/json',\n'Content-Type': 'application/json',\n},\n/* Donn\u00e9es envoy\u00e9es \u00e0 l'API */\nbody: JSON.stringify({\ntoken: token,\nname: trackerName,\n}),\n})\n/* R\u00e9cup\u00e8re la r\u00e9ponse de l'API */\n.then((response) =&gt; response.json())\n.then((json) =&gt; {\nconsole.log(json);\n/* Si il n'y a pas eu d'erreur, affiche le nom du traqueur, son ID et ses coordonn\u00e9es et envoie l'utilisateur \u00e0 la page de s\u00e9lction \n        des traqueurs en renvoyant le token */\nif (json.error.Message == 'Nothing goes wrong.') {\nalert(\n'Tracker name : ' + trackerName + '\\n' +\n'Tracker ID : ' + json.TrackerId + '\\n' +\n'TopicTX : ' + json.Topics.TX + '\\n' +\n'TopicRX : ' + json.Topics.RX\n);\nnavigation.navigate('TrackerNavigator', {\ntoken: token,\nnavigation: navigation,\n});\n/* Sinon, affiche une erreur */\n} else {\nalert('There was an error when adding the tracker');\n}\n})\n/* Si l'API ne r\u00e9pond pas, affiche une erreur indiquant que l'API ne fonctionne pas */\n.catch((error) =&gt; {\nconsole.error(error);\nalert('API down');\n});\n}\n};\n/* Affiche la page d'ajout de traqueur\nRe\u00e7oit en param\u00e8tre la variable 'navigation' */\nfunction AddTrackerScreen({ route, navigation }) {\nconst [trackerName, setTrackerName] = useState('');\nconst { token } = route.params;\n/* Affiche des logs au lancement et \u00e0 la 'destruction'*/\nuseEffect(() =&gt; {\nconsole.log('');\nconsole.log('ADD TRACKER LOGS :');\nconsole.log('AddTrackerScreen token : ' + token);\nreturn () =&gt; {\nconsole.log('');\nconsole.log('TRACKER SCREEN LOGS :');\n};\n}, [token]);\nreturn (\n&lt;View style={Styles.container}&gt;\n&lt;SafeAreaView&gt;\n{/* Cr\u00e9\u00e9 un champ qui met dans la variable 'trackerName' ce que saisi l'utilisateur */}\n&lt;Text style={Styles.paragraph}&gt;Tracker name&lt;/Text&gt;\n&lt;TextInput\nstyle={Styles.input}\nonChangeText={(text) =&gt; setTrackerName(text)}\nvalue={trackerName}\n/&gt;\n&lt;/SafeAreaView&gt;\n{/* Cr\u00e9\u00e9 qui va appeller la fonction 'AddTracker' */}\n&lt;TouchableOpacity\nstyle={LoginStyles.addTrackerButton}\nonPress={() =&gt; AddTracker(token, trackerName, navigation)}&gt;\n&lt;Text style={LoginStyles.loginButtonText}&gt;Add tracker&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n);\n}\nexport default AddTrackerScreen;\n</code></pre>"},{"location":"#coordinatesscreen","title":"coordinatesScreen","text":"<pre><code>import React, { Component, useState } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\n/* Importation des styles */\nimport Styles from './styles';\n/* Param\u00e8tres de la class 'CoordinatesScreen' */\ninterface AppProps {\nnavigation: any;\ntrackerId: string;\ntoken: string;\n}\n/* Arguments de la class 'CoordinatesScreen' */\ninterface AppState {\ndata: any[];\ndate: String;\nlatitude: String;\nlongitude: String;\nlatDelta: Int16Array;\nlonDelta: Int16Array;\nheight: String;\nwidth: String;\nbuttonTitle: String;\ncolor: String;\nzoomState: Bool;\n}\n/* Permet d'afficher les coordonn\u00e9es d'un traqueur\nRe\u00e7oit en param\u00e8tre le token de l'utilisateur, l'ID du traqueur s\u00e9lectionn\u00e9 et la variable 'navigation' */\nexport default class CoordinatesScreen extends Component&lt;AppProps, AppState&gt; {\nstate: AppState = {\ndata: [],\ndate: '',\nlatitude: '',\nlongitude: '',\nlatDelta: 0.1,\nlonDelta: 0.1,\nheight: '30%',\nwidth: '70%',\nbuttonTitle: 'Extend',\ncolor: '#009688',\nzoomState: 0,\n};\n/* Style du bouton 'Extend' qui permet d'agrandir la carte\n  Re\u00e7oit en param\u00e8tre la couleur du bouton (rouge pour activ\u00e9, vert pour d\u00e9sactiv\u00e9) */\nextend_button_style = function (a_color) {\nreturn {\nbackgroundColor: a_color,\nborderRadius: 10,\npaddingVertical: 7,\npaddingHorizontal: 7,\nmargin: 5,\nwidth: 90,\nalignSelf: 'center',\n};\n};\n/* Fonction qui va faire une requ\u00eate \u00e0 l'API en envoyant l'ID d'un traqueur afin de r\u00e9cup\u00e9rer la derni\u00e8re position\n  enregistr\u00e9 de ce traqueur */\nasync getPos() {\ntry {\n/* Faire une requ\u00eate \u00e0 l'API en lui donnant l'ID d'un traqueur */\nconst response = await fetch(\n'https://api.ovl.tech-user.fr/position/now/' + this.props.trackerId\n);\n/* Attend la r\u00e9ponse de l'API et la met en json dans la variable 'json' */\nconst json = await response.json();\nconsole.log(json);\n/* Si il n'y a pas d'erreur, stock les donn\u00e9es envoy\u00e9es par l'API */\nif (json.error.Message == 'Nothing goes wrong.') {\n/* Met sous forme de date le timestamp re\u00e7u */\nvar tempDate = new Date(Number(json.now.timestamp) * 1000);\n/* Formate la date pour la mettre sous la forme 'jj/mm/aaaa hh::mm::ss' */\nvar formattedDate =\n('0' + tempDate.getDate()).slice(-2) +\n'/' +\n('0' + (tempDate.getMonth() + 1)).slice(-2) +\n'/' +\ntempDate.getFullYear() +\n' ' +\n('0' + tempDate.getHours()).slice(-2) +\n':' +\n('0' + tempDate.getMinutes()).slice(-2) +\n':' +\n('0' + tempDate.getSeconds()).slice(-2);\nconsole.log('Timestamp : ' + json.now.timestamp);\nconsole.log('Formatted date : ' + formattedDate);\nconsole.log('Latitude : ' + json.now.lat);\nconsole.log('Longitude : ' + json.now.lon);\n/* Stock la longitude, la latitude et la date de la derni\u00e8re position enregistr\u00e9e dans les atributs de la class*/\nthis.setState({\ndate: formattedDate,\nlatitude: json.now.lat,\nlongitude: json.now.lon,\n});\n/* Sinon, affiche une erreur */\n} else {\nalert('Erreur inconnu');\n}\n} catch (error) {\n/* Si l'API ne r\u00e9pond pas, affiche une erreur indiquant que l'API ne fonctionne pas */\nconsole.log(error);\nalert('API down');\n}\n}\n/* Appelle la fonction 'getPos' lorsque la class est cr\u00e9\u00e9 */\ncomponentDidMount() {\nconsole.log('');\nconsole.log('COORDINATES SCREEN LOGS :');\nthis.getPos();\n}\n/* Affiche des logs \u00e0 la destruction de la class*/\ncomponentDidUnMount() {\nconsole.log('');\nconsole.log('TRACKER SCREEN LOGS :');\nthis.getPos();\n}\n/* Zoom sur la carte */\nzoom() {\nif (this.state.zoomState == 0) {\nthis.setState({\nlatDelta: 0.008,\nlonDelta: 0.008,\nzoomState: 1,\n});\n} else {\nthis.setState({\nlatDelta: 0.1,\nlonDelta: 0.1,\nzoomState: 0,\n});\n}\nthis.getPos();\n}\nrender() {\nreturn (\n&lt;View style={Styles.container}&gt;\n&lt;Text style={Styles.coordinates}&gt;\n{'Latitude : ' + this.state.latitude}\n&lt;/Text&gt;\n&lt;Text style={Styles.coordinates}&gt;\n{'Longitude : ' + this.state.longitude}\n&lt;/Text&gt;\n&lt;Text style={Styles.coordinates}&gt;\n{'Last update : ' + this.state.date}{' '}\n&lt;/Text&gt;\n{/* Affiche la carte */}\n&lt;MapView\nregion={{\nlatitude: Number(this.state.latitude),\nlongitude: Number(this.state.longitude),\nlatitudeDelta: this.state.latDelta,\nlongitudeDelta: this.state.lonDelta,\n}}\nstyle={{\nwidth: this.state.width,\nheight: this.state.height,\nalignSelf: 'center',\nmargin: 10,\n}}&gt;\n&lt;Marker\ncoordinate={{\nlatitude: Number(this.state.latitude),\nlongitude: Number(this.state.longitude),\nlatitudeDelta: 0.1,\nlongitudeDelta: 0.1,\n}}\n/&gt;\n&lt;/MapView&gt;\n{/* Ligne num\u00e9ro 1 des boutons (zoom+extend+refresh) */}\n&lt;View style={Styles.mapButtonContainer}&gt;\n{/* Zoom sur la carte */}\n&lt;TouchableOpacity\nstyle={this.extend_button_style('#009688')}\nonPress={() =&gt; {\nthis.zoom();\n}}&gt;\n&lt;Text style={Styles.mapButtonText}&gt;Zoom&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n{/* Agrandi/R\u00e9tr\u00e9ci la carte */}\n&lt;TouchableOpacity\nstyle={this.extend_button_style(this.state.color)}\nonPress={() =&gt; {\nif (this.state.height == '72%') {\nthis.setState({\nheight: '30%',\nwidth: '70%',\ncolor: '#009688',\nbuttonTitle: 'Extend',\n});\n} else {\nthis.setState({\nheight: '72%',\nwidth: '100%',\ncolor: '#c61a09',\nbuttonTitle: 'Reduce',\n});\n}\n}}&gt;\n&lt;Text style={Styles.mapButtonText}&gt;{this.state.buttonTitle}&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n{/* Rafraichi la position sur la carte */}\n&lt;TouchableOpacity\nstyle={this.extend_button_style('#009688')}\nonPress={() =&gt; {\nthis.getPos();\n}}&gt;\n&lt;Text style={Styles.mapButtonText}&gt;Refresh&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n{/* Ligne num\u00e9ro 2 des boutons (settings+history) */}\n&lt;View style={Styles.mapButtonContainer}&gt;\n{/* Passe \u00e0 la page de settings en en envoyant le token de l'utilisateur et l'ID du traqueur */}\n&lt;TouchableOpacity\nstyle={this.extend_button_style('#77B5FE')}\nonPress={() =&gt; {\nthis.props.navigation.navigate('SettingsNavigator', {\ntrackerId: this.props.trackerId,\ntoken: this.props.token,\n});\n}}&gt;\n&lt;Text style={Styles.mapButtonText}&gt;Settings&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n{/* Passe \u00e0 la page d'historique de position en envoyant l'ID du traqueur */}\n&lt;TouchableOpacity\nstyle={this.extend_button_style('#77B5FE')}\nonPress={() =&gt; {\nthis.props.navigation.navigate('HistoryNavigator', {\ntrackerId: this.props.trackerId,\n});\n}}&gt;\n&lt;Text style={Styles.mapButtonText}&gt;History&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n&lt;/View&gt;\n);\n}\n}\n</code></pre>"},{"location":"#historyscreen_1","title":"historyScreen","text":"<pre><code>import React, { Component, useState } from 'react';\nimport { View, Text, FlatList } from 'react-native';\n/* Importation des styles */\nimport Styles from './styles';\nimport HistoryStyles from './historyStyles';\n/* Param\u00e8tres de la class 'HistoryScreen' */\ninterface AppProps {\ntrackerId: string;\n}\n/* Arguments de la class 'HistoryScreen' */\ninterface AppState {\ndata: String[];\ndate: String[];\nhour: String[];\n}\n/* Permet d'afficher l'historique de position d'un traqueur\nRe\u00e7oit en param\u00e8tre l'ID d'un traqueur */\nexport default class HistoryScreen extends Component&lt;AppProps, AppState&gt; {\nstate: AppState = {\ndata: [],\ndate: [],\nhour: [],\n};\n/* Fonction qui va faire une requ\u00eate \u00e0 l'API en lui donnant l'ID d'un traqueur afin de\n  r\u00e9cup\u00e9rer toutes les positions du traqueur enregistr\u00e9es les derni\u00e8res 48 heures */\nasync getHistory() {\ntry {\n/* Faire une requ\u00eate \u00e0 l'API en lui donnant le token l'utilisateur */\nconst response = await fetch(\n'https://api.ovl.tech-user.fr/position/history/' + this.props.trackerId\n);\n/* Attend la r\u00e9ponse de l'API et la met en json dans la variable 'json' */\nconst json = await response.json();\nconsole.log(json);\n/* Si il n'y a pas d'erreur, stock les donn\u00e9es envoy\u00e9es par l'API */\nif (json.error.Message == 'Nothing goes wrong.') {\nconsole.log(\n\"Nombre de position dans l'historique : \" + json.history.length\n);\nvar hour = [];\nvar date = [];\n/* Boucle le nombre de fois qu'il y a de position dans l'historique */\nfor (var i = 0; i &lt; json.history.length; i++) {\n/* Met sous forme de date le timestamp re\u00e7u */\nvar tempDate = new Date(Number(json.history[i].timestamp) * 1000);\n/* Formate la date pour la mettre sous la forme 'jj/mm/aaaa' */\ndate[i] =\n('0' + tempDate.getDate()).slice(-2) +\n'/' +\n('0' + (tempDate.getMonth() + 1)).slice(-2) +\n'/' +\ntempDate.getFullYear();\n/* Formate l'heure pour la mettre sous la forme 'hh::mm::ss' */\nhour[i] =\n('0' + tempDate.getHours()).slice(-2) +\n':' +\n('0' + tempDate.getMinutes()).slice(-2) +\n':' +\n('0' + tempDate.getSeconds()).slice(-2);\n}\n/* Stock dans les atributs de la class la date, l'heure et l'historique de position */\nthis.setState({\ndata: json.history,\ndate: date,\nhour: hour,\n});\n/* Sinon affiche une erreur */\n} else {\nalert('Erreur inconnu');\n}\n} catch (error) {\n/* Si l'API ne r\u00e9pond pas, affiche une erreur indiquant que l'API ne fonctionne pas */\nconsole.log(error);\nalert('API down');\n}\n}\n/* Appelle la fonction 'getHistory' lorsque la class est cr\u00e9\u00e9 */\ncomponentDidMount() {\nconsole.log('');\nconsole.log('HISTORY SCREEN LOGS :');\nthis.getHistory();\n}\n/* Affiche des logs \u00e0 la destruction de la class */\ncomponentDidUnMount() {\nconsole.log('');\nconsole.log('COORDINATES SCREEN LOGS :');\n}\nrender() {\nreturn (\n&lt;View style={Styles.container}&gt;\n&lt;View style={HistoryStyles.row}&gt;\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;Latitude&lt;/Text&gt;\n&lt;/View&gt;\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;Longitude&lt;/Text&gt;\n&lt;/View&gt;\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;Date&lt;/Text&gt;\n&lt;/View&gt;\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;Heure&lt;/Text&gt;\n&lt;/View&gt;\n&lt;/View&gt;\n&lt;View style={HistoryStyles.row}&gt;\n{/* Affiche les latitudes */}\n&lt;FlatList\ndata={this.state.data}\nrenderItem={({ item }) =&gt; (\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;{item.lat}&lt;/Text&gt;\n&lt;/View&gt;\n)}\nkeyExtractor={(item) =&gt; item.id}\n/&gt;\n{/* Affiche les longitudes */}\n&lt;FlatList\ndata={this.state.data}\nrenderItem={({ item }) =&gt; (\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;{item.lon}&lt;/Text&gt;\n&lt;/View&gt;\n)}\nkeyExtractor={(item) =&gt; item.id}\n/&gt;\n{/* Affiche les dates */}\n&lt;FlatList\ndata={this.state.date}\nrenderItem={({ item }) =&gt; (\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;{item}&lt;/Text&gt;\n&lt;/View&gt;\n)}\nkeyExtractor={(item) =&gt; item.id}\n/&gt;\n{/* Affiche les heures */}\n&lt;FlatList\ndata={this.state.hour}\nrenderItem={({ item }) =&gt; (\n&lt;View style={HistoryStyles.col}&gt;\n&lt;Text style={HistoryStyles.historyParagraph}&gt;{item}&lt;/Text&gt;\n&lt;/View&gt;\n)}\nkeyExtractor={(item) =&gt; item.id}\n/&gt;\n&lt;/View&gt;\n&lt;/View&gt;\n);\n}\n}\n</code></pre>"},{"location":"#settingsscreen","title":"settingsScreen","text":"<pre><code>import React, { Component } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { ProgressBar } from 'react-native-paper';\n/* Importation des styles */\nimport Styles from './styles';\n/* Attributs de la class 'SettingsScreen' */\ninterface AppState {\ndata: any[];\nstatusCharge: Boolean;\nstatusBat: String;\nstatusAlarm: Boolean;\nstatusOnline: Boolean;\nstatusEcomode: Boolean;\nstatusProtection: Boolean;\nstatusVhCharge: Boolean;\nstatusGPS: Boolean;\necoChanged: String;\nprotectionChanged: String;\nbatteryChargeColor: String;\n}\n/* Param\u00e8tres de la class 'SettingsScreen' */\ninterface AppProps {\ntrackerId: String;\ntoken: String;\n}\n/* Affiche la page affichant les statuts du traqueur et les param\u00e8tres changeables\nRe\u00e7oit l'ID d'un traqueur et la variable navigation */\nexport default class SettingsScreen extends Component&lt;AppState, AppProps&gt; {\nstate: AppState = {\ndata: [],\nstatusCharge: 0,\nstatusBat: '0',\nstatusAlarm: 0,\nstatusOnline: 0,\nstatusEcomode: 0,\nstatusProtection: 0,\nstatusVhCharge: 0,\nstatusGPS: 0,\necoChanged: '',\nprotectionChanged: '',\nbatteryChargeColor: '#c61a09',\n};\n/* Style pour les statuts et param\u00e8tres du traqueur (rouge pour d\u00e9sactiv\u00e9, vert pour activ\u00e9) \n  Re\u00e7oit en param\u00e8tre un bool\u00e9en indiquant si le statut/param\u00e8tre est activ\u00e9 ou non */\nstatus_style = function (state) {\nvar a_color = '#c61a09';\n/* Si le statut/param\u00e8tre est activ\u00e9, met le bouton en vert */\nif (state == 1) {\na_color = '#22844e';\n}\nreturn {\nmarginTop: 10,\npaddingVertical: 8,\nborderRadius: 6,\nbackgroundColor: a_color,\ntextAlign: 'center',\nfontSize: 16,\nfontWeight: 'bold',\nalignSelf: 'center',\nwidth: 135,\n};\n};\n/* Change le statut (activ\u00e9/d\u00e9sactiv\u00e9) du param\u00e8tre 'EcoMode'  (ne l'applique pas) */\nchangeEcoSettings = () =&gt; {\n/* Si le param\u00e8tre n'a pas \u00e9t\u00e9 chang\u00e9, met une \u00e9toile devant le param\u00e8tre 'EcoMode' indiquant le changement */\nif (this.state.ecoChanged == '') {\n/* Si le statut \u00e9tait d\u00e9sactiv\u00e9, l'active*/\nif (this.state.statusEcomode == 0) {\nthis.setState({\necoChanged: '*',\nstatusEcomode: 1,\n});\n/* Sinon, le d\u00e9sactive */\n} else {\nthis.setState({\necoChanged: '*',\nstatusEcomode: 0,\n});\n}\n/* Si la param\u00e8tre a d\u00e9j\u00e0 \u00e9t\u00e9 chang\u00e9, enl\u00e8ve l'\u00e9toile */\n} else {\nif (this.state.statusEcomode == 0) {\nthis.setState({\necoChanged: '',\nstatusEcomode: 1,\n});\n} else {\nthis.setState({\necoChanged: '',\nstatusEcomode: 0,\n});\n}\n}\n};\n/* Change le statut (activ\u00e9/d\u00e9sactiv\u00e9) du param\u00e8tre 'Protection'  (ne l'applique pas) */\nchangeProtectionSettings = () =&gt; {\n/* Si le param\u00e8tre n'a pas \u00e9t\u00e9 chang\u00e9, met une \u00e9toile devant le param\u00e8tre 'Protection' indiquant le changement */\nif (this.state.protectionChanged == '') {\n/* Si le statut \u00e9tait d\u00e9sactiv\u00e9, l'active*/\nif (this.state.statusProtection == 0) {\nthis.setState({\nprotectionChanged: '*',\nstatusProtection: 1,\n});\n/* Sinon, le d\u00e9sactive */\n} else {\nthis.setState({\nprotectionChanged: '*',\nstatusProtection: 0,\n});\n}\n/* Si la param\u00e8tre a d\u00e9j\u00e0 \u00e9t\u00e9 chang\u00e9, enl\u00e8ve l'\u00e9toile */\n} else {\nif (this.state.statusProtection == 0) {\nthis.setState({\nprotectionChanged: '',\nstatusProtection: 1,\n});\n} else {\nthis.setState({\nprotectionChanged: '',\nstatusProtection: 0,\n});\n}\n}\n};\n/* Applique les settings chang\u00e9s\n  Re\u00e7oit en param\u00e8tre l'ID d'un traqueur ainsi que le statut de l'alarm, du mode \u00e9conomique, de la protection et de la charge du v\u00e9hicule */\nputSettings = (trackerId, alarm, ecoMode, protection, vhCharge) =&gt; {\n/* R\u00e9initialise les statuts de changement */\nthis.setState({\necoChanged: '',\nprotectionChanged: '',\n});\n/* Fait une requ\u00eate \u00e0 l'API pour changer les param\u00e8tres du traqueur */\nfetch('https://api.ovl.tech-user.fr/set/status/', {\nmethod: 'PUT',\nheaders: {\nAccept: 'application/json',\n'Content-Type': 'application/json',\n},\n/* Envoie l'ID du traqueur et le statut de chaque param\u00e8tre */\nbody: JSON.stringify({\nid_iot: trackerId,\nstatus_alarm: alarm,\nstatus_ecomode: ecoMode,\nstatus_protection: protection,\nstatus_vh_charge: vhCharge,\n}),\n})\n/* R\u00e9cup\u00e8re la r\u00e9ponse de l'API */\n.then((response) =&gt; response.json())\n.then((json) =&gt; {\nconsole.log(json);\n/* Si le changement s'est bien effectu\u00e9, affiche que \u00e7a s'est bien effectu\u00e9 */\nif (json.error.Message == 'Nothing goes wrong.') {\nalert('Changement appliqu\u00e9s !');\n} else {\nalert(\"Erreur lors de l'application des changements.\");\n}\n})\n.catch((error) =&gt; {\n/* Si l'API ne r\u00e9pond pas, affiche une erreur indiquant que l'API ne fonctionne pas */\nconsole.log(error);\nalert('API down');\n});\n};\n/* Fonction qui va faire une requ\u00eate \u00e0 l'API en envoyant le token de l'utilisateur afin de recevoir les statuts de son traqueur */\nasync getStatus() {\ntry {\n/* R\u00e9initialise les statuts/param\u00e8tres du traqueur dans la class */\nthis.setState({\ndata: [],\nstatusCharge: 0,\nstatusBat: '0',\nstatusAlarm: 0,\nstatusOnline: 0,\nstatusEcomode: 0,\nstatusProtection: 0,\nstatusVhCharge: 0,\nstatusGPS: 0,\necoChanged: '',\nprotectionChanged: '',\n});\n/* Fait le requ\u00eate \u00e0 l'API en envoyant le token de l'utilisateur */\nconst response = await fetch(\n'https://api.ovl.tech-user.fr/status_list/' + this.props.token\n);\n/* R\u00e9cup\u00e8re la r\u00e9ponse dans la variable 'json' */\nconst json = await response.json();\n/* Met dans 'data' le json */\nthis.setState({\ndata: json.status_list[this.props.trackerId - 1],\n});\nconsole.log(json.status_list[this.props.trackerId - 1]);\nthis.setState({\nstatusBat: json.status_list[this.props.trackerId - 1].status_bat,\n});\n/* Si la charge de la batterie est sup\u00e9rieur \u00e0 60%, change la couleur de la barre de charge en vert */\nif (Number(json.status_list[this.props.trackerId - 1].status_bat) &gt; 60) {\nthis.setState({\nbatteryChargeColor: '#096A09',\n});\n/* Si la charge de la batterie est inf\u00e9rieur \u00e0 30%, change la couleur de la barre de charge en rouge */\n} else if (\nNumber(json.status_list[this.props.trackerId - 1].status_bat) &lt; 30\n) {\nthis.setState({\nbatteryChargeColor: '#c61a09',\n});\n/* Sinon, la met en orange */\n} else {\nthis.setState({\nbatteryChargeColor: '#ff7f00',\n});\n}\nstatusBat = json.status_list[this.props.trackerId - 1].status_bat;\n/* Pour chaque 'if(...)', initialise les statuts du traqueur dans la classe pour mettre ceux re\u00e7u par l'API */\nif (json.status_list[this.props.trackerId - 1].status_charge == 1) {\nthis.setState({\nstatusCharge: 1,\n});\n}\nif (json.status_list[this.props.trackerId - 1].status_alarm == 1) {\nthis.setState({\nstatusAlarm: 1,\n});\n}\nif (json.status_list[this.props.trackerId - 1].status_ecomode == 1) {\nthis.setState({\nstatusEcomode: 1,\n});\n}\nif (json.status_list[this.props.trackerId - 1].status_online == 1) {\nthis.setState({\nstatusOnline: 1,\n});\n}\nif (json.status_list[this.props.trackerId - 1].status_protection == 1) {\nthis.setState({\nstatusProtection: 1,\n});\n}\nif (json.status_list[this.props.trackerId - 1].status_gps == 1) {\nthis.setState({\nstatusGPS: 1,\n});\n}\nif (json.status_list[this.props.trackerId - 1].status_vh_charge == 1) {\nthis.setState({\nstatus_vh_charge: 1,\n});\n}\n} catch (error) {\nconsole.log(error);\n}\n}\n/* Lance la fonction 'getStatus' \u00e0 la cr\u00e9ation de la class */\ncomponentDidMount() {\nconsole.log('');\nconsole.log('SETTINGS SCREEN LOGS :');\nthis.getStatus();\n}\n/* Affiche des logs \u00e0 la destruction de la class */\ncomponentDidUnMount() {\nconsole.log('');\nconsole.log('COORDINATES SCREEN LOGS :');\n}\nrender() {\nreturn (\n&lt;View style={Styles.container}&gt;\n{/* R\u00e9appelle la fonction 'getStatus' pour rafraichir les statuts */}\n&lt;TouchableOpacity\nstyle={Styles.settingsButtonContainer}\nonPress={() =&gt; {\nthis.getStatus();\n}}&gt;\n&lt;Text style={Styles.buttonText}&gt;{'Refresh'}&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n{/* Applique les param\u00e8tres chang\u00e9s */}\n&lt;TouchableOpacity\nstyle={Styles.settingsButtonContainer}\nonPress={() =&gt; {\nthis.putSettings(\nthis.props.trackerId,\nthis.state.statusAlarm,\nthis.state.statusEcomode,\nthis.state.statusProtection,\nthis.state.statusVhCharge\n);\n}}&gt;\n&lt;Text style={Styles.buttonText}&gt;{'Apply Settings'}&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;Text style={Styles.listText}&gt;\n{'Battery charge (' + this.state.statusBat + '%) :'}\n&lt;/Text&gt;\n&lt;ProgressBar\nprogress={Number(this.state.statusBat) / 100}\ncolor={this.state.batteryChargeColor}\nstyle={Styles.batteryBar}\n/&gt;\n{/* Affiche les statuts du traqueur */}\n&lt;Text style={Styles.listText}&gt;{'Tracker status :'}&lt;/Text&gt;\n&lt;Text style={this.status_style(this.state.data.status_vh_charge)}&gt;\n{'In charge'}\n&lt;/Text&gt;\n&lt;Text style={this.status_style(this.state.data.status_online)}&gt;\n{'Is connected'}\n&lt;/Text&gt;\n&lt;Text style={this.status_style(this.state.data.status_vh_charge)}&gt;\n{'Vehicule charge'}\n&lt;/Text&gt;\n&lt;Text style={this.status_style(this.state.data.status_gps)}&gt;\n{'GPS'}\n&lt;/Text&gt;\n&lt;Text style={this.status_style(this.state.data.status_alarm)}&gt;\n{'Alarm'}\n&lt;/Text&gt;\n{/* Affiche le statut des param\u00e8tres du traqueur */}\n&lt;Text style={Styles.listText}&gt;{'Tracker settings :'}&lt;/Text&gt;\n{/* Pour chaque param\u00e8tre, change dans la class le statut du param\u00e8tre lorsque le boutton est appuy\u00e9 */}\n&lt;TouchableOpacity\nstyle={this.status_style(this.state.statusEcomode)}\nonPress={() =&gt; {\nthis.changeEcoSettings();\n}}&gt;\n&lt;Text style={Styles.buttonText}&gt;\n{this.state.ecoChanged + ' Eco mode'}\n&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;TouchableOpacity\nstyle={this.status_style(this.state.statusProtection)}\nonPress={() =&gt; {\nthis.changeProtectionSettings();\n}}&gt;\n&lt;Text style={Styles.buttonText}&gt;\n{this.state.protectionChanged + ' Protection'}\n&lt;/Text&gt;\n&lt;/TouchableOpacity&gt;\n&lt;/View&gt;\n);\n}\n}\n</code></pre>"},{"location":"#styles","title":"styles","text":"<pre><code>import { StyleSheet } from 'react-native';\nimport Constants from 'expo-constants';\n/* Cr\u00e9\u00e9 les styles g\u00e9n\u00e9raux */\nexport default Styles = StyleSheet.create({\ncontainer: {\nflex: 1,\njustifyContent: 'center',\npaddingTop: Constants.statusBarHeight,\nbackgroundColor: '#e4eded',\npadding: 8,\n},\nparagraph: {\nmargin: 10,\nfontSize: 18,\nfontWeight: 'bold',\ntextAlign: 'left',\n},\ninput: {\nheight: 40,\nmargin: 12,\nborderWidth: 1,\nbackgroundColor: '#c8cfcf',\npadding: 10,\nborderRadius: 10,\n},\nitem: {\npadding: 20,\nmarginVertical: 8,\nmarginHorizontal: 16,\n},\ntitle: {\nfontSize: 32,\n},\ncoordinates: {\nfontSize: 18,\ntextAlign: 'center',\n},\nbuttonContainer: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 10,\npaddingHorizontal: 10,\nmarginHorizontal: 125,\nmargin: 10,\nwidth: 150,\nalignSelf: 'center',\nflex: 1,\n},\nbuttonText: {\nfontSize: 18,\ncolor: '#fff',\nfontWeight: 'bold',\nalignSelf: 'center',\n},\ncontainer2: {\nflexDirection: 'row',\nalignItems: 'center',\njustifyContent: 'center',\n},\nprogressBar: {\nheight: 20,\nflexDirection: 'row',\nwidth: '100%',\nbackgroundColor: 'white',\nborderColor: '#000',\nborderWidth: 2,\nborderRadius: 5,\n},\ntext: {\nflex: 1,\n},\ntext2: {\nflex: 2,\n},\nsettingsButtonContainer: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 10,\npaddingHorizontal: 10,\nmarginHorizontal: 125,\nmargin: 10,\nwidth: 250,\nalignSelf: 'center',\n},\nlistText: {\nfontSize: 22,\ncolor: '#000000',\nfontWeight: 'bold',\nalignSelf: 'center',\ntextAlign: 'center',\ntextDecorationLine: 'underline',\nmarginTop: 15,\n},\nmapButtonContainer: {\nflexDirection: 'row',\nalignItems: 'center',\njustifyContent: 'center',\n},\nmapButtonOpacity: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 7,\npaddingHorizontal: 7,\nmargin: 5,\nwidth: 75,\nalignSelf: 'center',\n},\nmapButtonText: {\nfontSize: 16,\ntextAlign: 'center',\n},\nbatteryBar: {\nwidth: 300,\nheight: 15,\nalignSelf: 'center',\nmarginTop: 10,\nborderRadius: 10,\n},\n});\n</code></pre>"},{"location":"#loginstyles","title":"loginStyles","text":"<pre><code>import { StyleSheet } from 'react-native';\n/* Cr\u00e9\u00e9 les styles pour la page 'loginScreen' */\nexport default LoginStyles = StyleSheet.create({\nappButtonContainer: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 10,\npaddingHorizontal: 10,\nmarginHorizontal: 125,\nmargin: 10,\nwidth: 150,\nalignSelf: 'center',\n},\nloginButtonText: {\nfontSize: 18,\ncolor: '#fff',\nfontWeight: 'bold',\nalignSelf: 'center',\n},\nloginButton: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 7,\npaddingHorizontal: 7,\nmargin: 5,\nmarginHorizontal: 35,\nwidth: 100,\nalignSelf: 'center',\n},\naddTrackerButton: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 7,\npaddingHorizontal: 7,\nmargin: 10,\nmarginHorizontal: 35,\nwidth: 290,\nalignSelf: 'center',\n},\n});\n</code></pre>"},{"location":"#historystyles","title":"historyStyles","text":"<pre><code>import { StyleSheet } from 'react-native';\nimport Constants from 'expo-constants';\n/* Cr\u00e9\u00e9 les styles pour la page 'historyScreen' */\nexport default HistoryStyles = StyleSheet.create({\napp: {\nflex: 4, // the number of columns you want to devide the screen into\nmarginHorizontal: 'auto',\nwidth: 400,\nbackgroundColor: 'red',\n},\nrow: {\nflexDirection: 'row',\n},\ncol: {\nbackgroundColor: 'lightblue',\nborderColor: '#fff',\nborderWidth: 1,\nflex: 1,\nwidth: 325,\n},\nhistoryContainer: {\nflex: 1,\njustifyContent: 'center',\npaddingTop: Constants.statusBarHeight,\nbackgroundColor: '#e4eded',\npadding: 8,\n},\nhistoryParagraph: {\nmargin: 3,\nfontSize: 13,\nfontWeight: 'bold',\ntextAlign: 'left',\n},\n});\n</code></pre>"},{"location":"#trackerstyles","title":"trackerStyles","text":"<pre><code>import { StyleSheet } from 'react-native';\n/* Cr\u00e9\u00e9 les styles pour la page 'trackerScreen' */\nexport default TrackerStyles = StyleSheet.create({\nlistText: {\nfontSize: 30,\ncolor: '#000000',\nfontWeight: 'bold',\nalignSelf: 'center',\ntextAlign: 'center',\ntextDecorationLine: 'underline',\n},\naddTrackerButtonContainer: {\nbackgroundColor: '#0f056b',\nborderRadius: 10,\npaddingVertical: 10,\npaddingHorizontal: 10,\nmarginHorizontal: 125,\nmargin: 10,\nwidth: 300,\nalignSelf: 'center',\n},\ntrackerButtonContainer: {\nbackgroundColor: '#009688',\nborderRadius: 10,\npaddingVertical: 10,\npaddingHorizontal: 10,\nmarginHorizontal: 125,\nwidth: 200,\nalignSelf: 'center',\n},\nappButtonText: {\nfontSize: 18,\ncolor: '#fff',\nfontWeight: 'bold',\nalignSelf: 'center',\ntextAlign: 'center',\n},\n});\n</code></pre>"}]}